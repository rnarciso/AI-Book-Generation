const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// This schema is designed to be the single source of truth for the story.
// It directly corresponds to the "Story Blueprint" JSON structure.

const StorySchema = new Schema({
  // Metadata: General information about the story project.
  metadata: {
    title: { type: String, default: 'Untitled Story' },
    author: { type: String, default: 'Unknown Author' },
    genre: { type: String, default: 'Not specified' },
    logline: { type: String, default: '' },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
  },

  // Style Guide: The stylistic and tonal rules for the narrative.
  // Generated by the Stylist Agent.
  styleGuide: {
    tone: { type: String, default: 'Neutral' },
    pacing: { type: String, default: 'Moderate' },
    pointOfView: { type: String, default: 'Third-person limited' },
    vocabularyLevel: { type: String, default: 'Standard' },
    stylisticTropes: { type: [String], default: [] },
    proseRules: { type: [String], default: [] }
  },

  // World Bible: The lore and rules of the story's universe.
  worldBible: {
    locations: { type: Schema.Types.Mixed, default: {} },
    magicSystems: { type: Schema.Types.Mixed, default: {} },
    technologies: { type: Schema.Types.Mixed, default: {} },
    historicalTimeline: { type: [String], default: [] }
  },

  // Character Codex: A flexible repository for character profiles.
  // Using Schema.Types.Mixed allows for unstructured or differently structured character sheets.
  characterCodex: {
    type: Schema.Types.Mixed,
    default: {}
  },

  // Plot Graph: The sequence of events that form the plot.
  // Using Schema.Types.Mixed allows for flexible graph structures (e.g., nodes and edges).
  plotGraph: {
    type: Schema.Types.Mixed,
    default: {}
  }
}, {
  // Automatically manage createdAt and updatedAt timestamps
  timestamps: { createdAt: 'metadata.createdAt', updatedAt: 'metadata.updatedAt' }
});

module.exports = mongoose.model('Story', StorySchema);
